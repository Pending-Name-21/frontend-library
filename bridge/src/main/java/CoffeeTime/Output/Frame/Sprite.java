// automatically generated by the FlatBuffers compiler, do not modify

package CoffeeTime.Output.Frame;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Sprite extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Sprite getRootAsSprite(ByteBuffer _bb) { return getRootAsSprite(_bb, new Sprite()); }
  public static Sprite getRootAsSprite(ByteBuffer _bb, Sprite obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Sprite __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CoffeeTime.Output.Frame.Coord position() { return position(new CoffeeTime.Output.Frame.Coord()); }
  public CoffeeTime.Output.Frame.Coord position(CoffeeTime.Output.Frame.Coord obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public CoffeeTime.Output.Frame.Size size() { return size(new CoffeeTime.Output.Frame.Size()); }
  public CoffeeTime.Output.Frame.Size size(CoffeeTime.Output.Frame.Size obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public boolean isHidden() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String path() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pathAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer pathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createSprite(FlatBufferBuilder builder,
      int positionOffset,
      int sizeOffset,
      boolean isHidden,
      int pathOffset) {
    builder.startTable(4);
    Sprite.addPath(builder, pathOffset);
    Sprite.addSize(builder, sizeOffset);
    Sprite.addPosition(builder, positionOffset);
    Sprite.addIsHidden(builder, isHidden);
    return Sprite.endSprite(builder);
  }

  public static void startSprite(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addOffset(0, positionOffset, 0); }
  public static void addSize(FlatBufferBuilder builder, int sizeOffset) { builder.addOffset(1, sizeOffset, 0); }
  public static void addIsHidden(FlatBufferBuilder builder, boolean isHidden) { builder.addBoolean(2, isHidden, false); }
  public static void addPath(FlatBufferBuilder builder, int pathOffset) { builder.addOffset(3, pathOffset, 0); }
  public static int endSprite(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Sprite get(int j) { return get(new Sprite(), j); }
    public Sprite get(Sprite obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

